server:
  port: 8888

spring:
  datasource:
    # массив датасорсов необязателен (если указан, то на нём выполняются только read-only транзакции)
    # причём нагрузка будет распределяться рандомно на любой из указанных датасорсов
    read-only:
      - url: ${SPRING_READ_ONLY_DATASOURCE_URL:jdbc:postgresql://localhost:6531/mydatabase}
        username: ${SPRING_READ_ONLY_DATASOURCE_USERNAME:postgres}
        password: ${SPRING_READ_ONLY_DATASOURCE_PASSWORD:postgres}
        driverClassName: org.postgresql.Driver
      # - url: jdbc:postgresql://localhost:6532/mydatabase
      #  username: ${SPRING_READ_ONLY_DATASOURCE_USERNAME:postgres}
      #  password: ${SPRING_READ_ONLY_DATASOURCE_PASSWORD:postgres}
      #  driverClassName: org.postgresql.Driver

    # обязательный датасорс (если указан read-only, то на read-write только write транзакции, иначе все)
    read-write:
      url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:6530/mydatabase}
      username: ${SPRING_DATASOURCE_USERNAME:postgres}
      password: ${SPRING_DATASOURCE_PASSWORD:postgres}
      driver-class-name: org.postgresql.Driver

    # необязательный датасорс (если указан - на нём будут выполняться запросы на работу с диалогами)
    sharding:
      url: ${SPRING_SHARDING_DATASOURCE_URL:jdbc:postgresql://localhost:6532/postgres}
      username: ${SPRING_SHARDING_DATASOURCE_USERNAME:postgres}
      password: ${SPRING_SHARDING_DATASOURCE_PASSWORD:postgres}
      driver-class-name: org.postgresql.Driver

  # брокер сообщений
  rabbitmq:
    host:  ${RABBITMQ_HOST:localhost}
    port: 5672
    username: user
    password: password

  # использует дефолтный датасорс
  flyway:
    enabled: true
    table: schema_history

  jpa:
    show_sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        show_sql: true

springdoc:
  api-docs:
    # доступ к OpenAPI
    path: /api-docs
  swagger-ui:
    # доступ к swagger
    path: /swagger-ui.html

logging:
  level:
    root: INFO
    org.springframework: WARN
    org.hibernate.SQL: DEBUG
    org.springframework.web.socket: DEBUG
    org.springframework.messaging: DEBUG
    org.springframework.jdbc.core.JdbcTemplate: DEBUG

# включаем актуатор с метриками на URL /actuator
management:
  endpoints:
    web:
      exposure:
        include: "*"