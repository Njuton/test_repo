version: '3.8'

services:
  app:
    build:
      context: ../
    container_name: my_app
    ports:
      - "${APP_PORT:-8888}:8888"
    environment:
      # Дефлолтный read-write датасорс
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-write:5432/mydatabase
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres

      # Датасорс на чтение (опционально)
      SPRING_READ_ONLY_DATASOURCE_URL: jdbc:postgresql://postgres-read:5432/mydatabase_readonly
      SPRING_READ_ONLY_DATASOURCE_USERNAME: readonly_user
      SPRING_READ_ONLY_DATASOURCE_PASSWORD: readonly_password

    depends_on:
      postgres-write:
        condition: service_healthy
      postgres-read:
        condition: service_healthy

  # инстанс потсгреса
  postgres-write:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    ports:
      - "${POSTGRES_PORT:-5438}:5432"
    volumes:
      - ./db/init-write.sql:/docker-entrypoint-initdb.d/init-write.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 1s
      timeout: 5s
      retries: 5

  postgres-read:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    ports:
      - "${POSTGRES_PORT:-5439}:5432"
    volumes:
      - ./db/init-read.sql:/docker-entrypoint-initdb.d/init-write.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 1s
      timeout: 5s
      retries: 5