services:
  app:
    build:
      context: ../
    container_name: my_app
    ports:
      - "${APP_PORT:-8888}:8888"
    environment:
      # Дефлолтный read-write датасорс
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/mydatabase
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres

      # Датасорс на запросы чтения при работе с постами
      SPRING_READ_ONLY_DATASOURCE_URL: jdbc:postgresql://postgres:5432/mydatabase
      SPRING_READ_ONLY_DATASOURCE_USERNAME: postgres
      SPRING_READ_ONLY_DATASOURCE_PASSWORD: postgres

      # Датасорс на запросы для работы с диалогами
      SPRING_SHARDING_DATASOURCE_URL: jdbc:postgresql://master:5432/postgres
      SPRING_SHARDING_DATASOURCE_USERNAME: postgres
      SPRING_SHARDING_DATASOURCE_PASSWORD: postgres

    depends_on:
      - postgres
      - master

  postgres:
    image: postgres:17
    container_name: postgres_container
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    ports:
      - "${POSTGRES_PORT:-5440}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 1s
      timeout: 5s
      retries: 5

  master:
    container_name: "${COMPOSE_PROJECT_NAME:-citus}_master"
    image: "citusdata/citus:13.0.3"
    ports: [ "${COORDINATOR_EXTERNAL_PORT:-5460}:5432" ]
    labels: [ "com.citusdata.role=Master" ]
    environment: &AUTH
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      PGUSER: "${POSTGRES_USER:-postgres}"
      PGPASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_HOST_AUTH_METHOD: "${POSTGRES_HOST_AUTH_METHOD:-trust}"
  worker:
    image: "citusdata/citus:13.0.3"
    labels: [ "com.citusdata.role=Worker" ]
    depends_on: [ manager ]
    environment: *AUTH
    command: "/wait-for-manager.sh"
    volumes:
      - healthcheck-volume:/healthcheck
  manager:
    container_name: "${COMPOSE_PROJECT_NAME:-citus}_manager"
    image: "citusdata/membership-manager:0.3.0"
    volumes:
      - "${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock"
      - healthcheck-volume:/healthcheck
    depends_on: [ master ]
    environment: *AUTH

volumes:
  healthcheck-volume: